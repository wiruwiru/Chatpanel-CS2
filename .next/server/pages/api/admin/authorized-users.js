"use strict";(()=>{var e={};e.id=135,e.ids=[135],e.modules={666:e=>{e.exports=require("cookie")},829:e=>{e.exports=require("jsonwebtoken")},3480:(e,t,a)=>{e.exports=a(5600)},3934:(e,t,a)=>{a.r(t),a.d(t,{config:()=>c,default:()=>E,routeModule:()=>h});var s={};a.r(s),a.d(s,{default:()=>d});var r=a(3480),n=a(8667),o=a(6435),i=a(666),u=a(829),l=a(8954);async function d(e,t){let a=(0,i.parse)(e.headers.cookie||"").session;if(!a)return t.status(401).json({message:"Unauthorized"});try{let s=(0,u.verify)(a,process.env.SESSION_SECRET),r=await l.A.getConnection();try{let[a]=await r.execute("SELECT role FROM chatpanel_authorized WHERE steam_id = ?",[s.steamId64]);if(0===a.length||"owner"!==a[0].role)return t.status(403).json({message:"Forbidden: Only owners can manage users"});if("GET"===e.method){let[e]=await r.execute("SELECT * FROM chatpanel_authorized");t.status(200).json({users:e})}else if("POST"===e.method){let{steamId:a,role:s}=e.body,[n]=await r.execute("SELECT * FROM chatpanel_roles WHERE name = ?",[s]);if(0===n.length)return t.status(400).json({message:"Invalid role"});await r.execute("INSERT INTO chatpanel_authorized (steam_id, role) VALUES (?, ?)",[a,s]),t.status(201).json({message:"User added successfully"})}else if("PUT"===e.method){let{steamId:a,role:n}=e.body,[o]=await r.execute("SELECT * FROM chatpanel_roles WHERE name = ?",[n]);if(0===o.length)return t.status(400).json({message:"Invalid role"});let[i]=await r.execute("SELECT role FROM chatpanel_authorized WHERE steam_id = ?",[a]);if(i.length>0&&"owner"===i[0].role){let[e]=await r.execute("SELECT role FROM chatpanel_authorized WHERE steam_id = ?",[s.steamId64]);if(0===e.length||"owner"!==e[0].role)return t.status(403).json({message:"Only owners can modify other owners"})}await r.execute("UPDATE chatpanel_authorized SET role = ? WHERE steam_id = ?",[n,a]),t.status(200).json({message:"User role updated successfully"})}else if("DELETE"===e.method){let{steamId:a}=e.query,[n]=await r.execute("SELECT role FROM chatpanel_authorized WHERE steam_id = ?",[a]);if(n.length>0&&"owner"===n[0].role){let[e]=await r.execute("SELECT role FROM chatpanel_authorized WHERE steam_id = ?",[s.steamId64]);if(0===e.length||"owner"!==e[0].role)return t.status(403).json({message:"Only owners can delete owners"});let[a]=await r.execute("SELECT COUNT(*) as count FROM chatpanel_authorized WHERE role = ?",["owner"]);if(a[0].count<=1)return t.status(400).json({message:"Cannot delete the last owner"})}await r.execute("DELETE FROM chatpanel_authorized WHERE steam_id = ?",[a]),t.status(200).json({message:"User removed successfully"})}else t.status(405).json({message:"Method not allowed"})}finally{r.release()}}catch(e){console.error("Error in authorized-users API:",e),t.status(500).json({message:"Internal server error"})}}let E=(0,o.M)(s,"default"),c=(0,o.M)(s,"config"),h=new r.PagesAPIRouteModule({definition:{kind:n.A.PAGES_API,page:"/api/admin/authorized-users",pathname:"/api/admin/authorized-users",bundlePath:"",filename:""},userland:s})},5600:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6435:(e,t)=>{Object.defineProperty(t,"M",{enumerable:!0,get:function(){return function e(t,a){return a in t?t[a]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,a)):"function"==typeof t&&"default"===a?t:void 0}}})},8667:(e,t)=>{Object.defineProperty(t,"A",{enumerable:!0,get:function(){return a}});var a=function(e){return e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE",e.IMAGE="IMAGE",e}({})},8954:(e,t,a)=>{a.d(t,{A:()=>r});let s=require("mysql2/promise"),r=a.n(s)().createPool({host:process.env.DB_HOST,user:process.env.DB_USER,password:process.env.DB_PASSWORD,database:process.env.DB_NAME,waitForConnections:!0,connectionLimit:10,queueLimit:0})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var a=t(t.s=3934);module.exports=a})();